pipeline {
    agent {
        docker {
            image 'docker:24-dind'
            args '--privileged -v /var/run/docker.sock:/var/run/docker.sock'
        }
    }
    
    environment {
        DOCKER_IMAGE_NAME = 'rs-school-devops'
    }

    stages {
        stage('Setup') {
            steps {
                echo '--------------------------------'
                echo 'Setting up....'
                sh '''
                    # Install required packages for Alpine Linux (docker:dind is Alpine-based)
                    apk add --no-cache python3 py3-pip python3-dev curl bash git
                    python3 -m venv .venv
                    .venv/bin/pip install --upgrade pip
                    
                    # Install Helm
                    curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
                    helm version
                    
                    # Install kubectl
                    curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
                    chmod +x kubectl
                    mv kubectl /usr/local/bin/
                    kubectl version --client
                    
                    # Verify Docker is working
                    docker --version
                    docker info
                '''
            }
        }
        
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
        
        stage('Test') {
            steps {
                echo '--------------------------------'
                echo 'Testing....'
                sh '''
                    .venv/bin/pip install -r app/requirements.txt
                    cd app && ../.venv/bin/python -m unittest discover
                '''
            }
        }
        
        stage('Security Scan') {
            steps {
                echo '--------------------------------'
                echo 'Security Scanning....'
                // Add security scanning tools here
                echo 'Security scan completed'
            }
        }
        
        stage('Build Docker Image') {
            steps {
                echo '--------------------------------'
                echo 'Building Docker Image....'
                script {
                    def gitCommitShort = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()
                    env.GIT_COMMIT_SHORT = gitCommitShort
                    
                    echo "Building with version: ${gitCommitShort}"
                    
                    // Build Docker image
                    def dockerImage = docker.build("${env.DOCKER_IMAGE_NAME}:${gitCommitShort}", "./app")
                    dockerImage.tag("latest")
                    
                    // Store image for later use
                    env.DOCKER_IMAGE = "${env.DOCKER_IMAGE_NAME}:${gitCommitShort}"
                }
            }
        }
        
        stage('Push Docker Image') {
            when {
                anyOf {
                    branch 'main'
                    branch 'master'
                    branch 'task-6'
                }
            }
            steps {
                echo '--------------------------------'
                echo 'Pushing Docker Image to Docker Hub....'
                script {
                    docker.withRegistry('https://registry.hub.docker.com', 'dockerhub-credentials') {
                        def dockerImage = docker.image("${env.DOCKER_IMAGE_NAME}:${env.GIT_COMMIT_SHORT}")
                        
                        // Tag and push with commit hash
                        dockerImage.push("${env.GIT_COMMIT_SHORT}")
                        dockerImage.push("latest")
                    }
                }
            }
        }
        
        stage('Deploy to Kubernetes') {
            when {
                anyOf {
                    branch 'main'
                    branch 'master'
                    branch 'task-6'
                }
            }
            steps {
                echo '--------------------------------'
                echo 'Deploying with Helm....'
                withCredentials([usernamePassword(credentialsId: 'dockerhub-credentials', 
                                                 passwordVariable: 'DOCKER_PASSWORD', 
                                                 usernameVariable: 'DOCKER_USERNAME')]) {
                    sh '''
                        DOCKER_IMAGE="${DOCKER_USERNAME}/${DOCKER_IMAGE_NAME}:${GIT_COMMIT_SHORT}"
                        
                        echo "Deploying ${DOCKER_IMAGE} to Kubernetes using Helm..."
                        
                        # Deploy using Helm
                        helm upgrade --install rs-school-devops ./k8s/helm/nginx/ \
                            --set image.repository="${DOCKER_USERNAME}/${DOCKER_IMAGE_NAME}" \
                            --set image.tag="${GIT_COMMIT_SHORT}" \
                            --wait \
                            --timeout=300s
                        
                        # Show deployment status
                        kubectl get deployments
                        kubectl get services
                        kubectl get pods
                    '''
                }
            }
        }
        
        stage('Verify Deployment') {
            when {
                anyOf {
                    branch 'main'
                    branch 'master'
                    branch 'task-6'
                }
            }
            steps {
                echo '--------------------------------'
                echo 'Verifying Kubernetes Deployment....'
                sh '''
                    # Wait for deployment to be ready
                    kubectl wait --for=condition=available --timeout=300s deployment/rs-school-devops
                    
                    # Get service information
                    kubectl get service rs-school-devops-nginx-service || kubectl get service rs-school-devops-service || echo "Service not found"
                    
                    # Get pod status
                    kubectl get pods -l app=rs-school-devops
                    
                    # Test the service (basic verification)
                    .venv/bin/pip install requests
                    .venv/bin/python3 -c "
import time
print('Deployment verification complete!')
print('Application has been successfully deployed to Kubernetes')

# Check pod logs for any immediate issues
import subprocess
try:
    result = subprocess.run(['kubectl', 'logs', '-l', 'app=rs-school-devops', '--tail=10'], 
                          capture_output=True, text=True, timeout=30)
    print('Recent application logs:')
    print(result.stdout)
except Exception as e:
    print(f'Could not retrieve logs: {e}')
"
                '''
            }
        }
    }
    
    post {
        always {
            echo 'Pipeline completed!'
            // Clean up docker images to save space
            sh '''
                docker system prune -f || true
            ''' 
        }
        success {
            echo 'Pipeline succeeded!'
        }
        failure {
            echo 'Pipeline failed!'
        }
    }
}