pipeline {
    agent any
    
    environment {
        DOCKER_IMAGE_NAME = 'rs-school-devops'
    }

    stages {
        stage('Setup') {
            steps {
                echo '--------------------------------'
                echo 'Setting up....'
                sh '''
                    # Check if docker is available
                    docker --version
                    
                    # Install python3 and pip if not available (adjust for your system)
                    if ! command -v python3 &> /dev/null; then
                        echo "Python3 not found, please ensure it's installed"
                        exit 1
                    fi
                    
                    # Create virtual environment
                    python3 -m venv .venv || python3 -m pip install --user virtualenv && python3 -m virtualenv .venv
                    .venv/bin/pip install --upgrade pip
                    
                    # Install or update Helm
                    if ! command -v helm &> /dev/null; then
                        echo "Installing Helm..."
                        curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
                    fi
                    helm version
                    
                    # Install or update kubectl
                    if ! command -v kubectl &> /dev/null; then
                        echo "Installing kubectl..."
                        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
                        chmod +x kubectl
                        sudo mv kubectl /usr/local/bin/ || mv kubectl /usr/local/bin/
                    fi
                    kubectl version --client
                '''
            }
        }
        
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
        
        stage('Test') {
            steps {
                echo '--------------------------------'
                echo 'Testing....'
                sh '''
                    .venv/bin/pip install -r app/requirements.txt
                    cd app && ../.venv/bin/python -m unittest discover
                '''
            }
        }
        
        stage('Security Scan') {
            steps {
                echo '--------------------------------'
                echo 'Security Scanning....'
                // Add security scanning tools here
                echo 'Security scan completed'
            }
        }
        
        stage('Build Docker Image') {
            steps {
                echo '--------------------------------'
                echo 'Building Docker Image....'
                sh '''
                    # Get git commit hash for versioning
                    GIT_COMMIT_SHORT=$(git rev-parse --short HEAD)
                    echo "Building with version: ${GIT_COMMIT_SHORT}"
                    
                    # Build Docker image
                    docker build -t ${DOCKER_IMAGE_NAME}:${GIT_COMMIT_SHORT} ./app
                    docker tag ${DOCKER_IMAGE_NAME}:${GIT_COMMIT_SHORT} ${DOCKER_IMAGE_NAME}:latest
                '''
            }
        }
        
        stage('Push Docker Image') {
            when {
                anyOf {
                    branch 'main'
                    branch 'master'
                    branch 'task-6'
                }
            }
            steps {
                echo '--------------------------------'
                echo 'Pushing Docker Image to Docker Hub....'
                withCredentials([usernamePassword(credentialsId: 'dockerhub-credentials', 
                                                 passwordVariable: 'DOCKER_PASSWORD', 
                                                 usernameVariable: 'DOCKER_USERNAME')]) {
                    sh '''
                        # Get git commit hash for versioning
                        GIT_COMMIT_SHORT=$(git rev-parse --short HEAD)
                        
                        # Tag with Docker Hub repository name
                        docker tag ${DOCKER_IMAGE_NAME}:${GIT_COMMIT_SHORT} ${DOCKER_USERNAME}/${DOCKER_IMAGE_NAME}:${GIT_COMMIT_SHORT}
                        docker tag ${DOCKER_IMAGE_NAME}:${GIT_COMMIT_SHORT} ${DOCKER_USERNAME}/${DOCKER_IMAGE_NAME}:latest
                        
                        # Login and push to Docker Hub
                        echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin
                        docker push ${DOCKER_USERNAME}/${DOCKER_IMAGE_NAME}:${GIT_COMMIT_SHORT}
                        docker push ${DOCKER_USERNAME}/${DOCKER_IMAGE_NAME}:latest
                        docker logout
                    '''
                }
            }
        }
        
        stage('Deploy to Kubernetes') {
            when {
                anyOf {
                    branch 'main'
                    branch 'master'
                    branch 'task-6'
                }
            }
            steps {
                echo '--------------------------------'
                echo 'Deploying with Helm....'
                withCredentials([usernamePassword(credentialsId: 'dockerhub-credentials', 
                                                 passwordVariable: 'DOCKER_PASSWORD', 
                                                 usernameVariable: 'DOCKER_USERNAME')]) {
                    sh '''
                        GIT_COMMIT_SHORT=$(git rev-parse --short HEAD)
                        DOCKER_IMAGE="${DOCKER_USERNAME}/${DOCKER_IMAGE_NAME}:${GIT_COMMIT_SHORT}"
                        
                        echo "Deploying ${DOCKER_IMAGE} to Kubernetes using Helm..."
                        
                        # Deploy using Helm
                        helm upgrade --install rs-school-devops ./k8s/helm/nginx/ \
                            --set image.repository="${DOCKER_USERNAME}/${DOCKER_IMAGE_NAME}" \
                            --set image.tag="${GIT_COMMIT_SHORT}" \
                            --wait \
                            --timeout=300s
                        
                        # Show deployment status
                        kubectl get deployments
                        kubectl get services
                        kubectl get pods
                    '''
                }
            }
        }
        
        stage('Verify Deployment') {
            when {
                anyOf {
                    branch 'main'
                    branch 'master'
                    branch 'task-6'
                }
            }
            steps {
                echo '--------------------------------'
                echo 'Verifying Kubernetes Deployment....'
                sh '''
                    # Wait for deployment to be ready
                    kubectl wait --for=condition=available --timeout=300s deployment/rs-school-devops
                    
                    # Get service information
                    kubectl get service rs-school-devops-nginx-service || kubectl get service rs-school-devops-service || echo "Service not found"
                    
                    # Get pod status
                    kubectl get pods -l app=rs-school-devops
                    
                    # Test the service (basic verification)
                    .venv/bin/pip install requests
                    .venv/bin/python -c "
import time
print('Deployment verification complete!')
print('Application has been successfully deployed to Kubernetes')

# Check pod logs for any immediate issues
import subprocess
try:
    result = subprocess.run(['kubectl', 'logs', '-l', 'app=rs-school-devops', '--tail=10'], 
                          capture_output=True, text=True, timeout=30)
    print('Recent application logs:')
    print(result.stdout)
except Exception as e:
    print(f'Could not retrieve logs: {e}')
"
                '''
            }
        }
    }
    
    post {
        always {
            echo 'Pipeline completed!'
            // Clean up docker images to save space
            sh '''
                docker system prune -f || true
            ''' 
        }
        success {
            echo 'Pipeline succeeded!'
        }
        failure {
            echo 'Pipeline failed!'
        }
    }
}