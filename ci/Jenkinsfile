pipeline {
    agent {
        docker {
            image 'docker:24-dind'
            args '--privileged -v /var/run/docker.sock:/var/run/docker.sock'
        }
    }

    stages {
        stage('Setup') {
            steps {
                echo '--------------------------------'
                echo 'Setting up....'
                sh '''
                    apk add --no-cache python3 py3-pip python3-dev curl
                    python3 -m venv .venv
                    .venv/bin/pip install --upgrade pip
                    
                    # Install Helm
                    curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
                    helm version
                    
                    # Install kubectl (for Kubernetes interaction)
                    curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
                    chmod +x kubectl
                    mv kubectl /usr/local/bin/
                '''
            }
        }
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
        stage('Test') {
            steps {
                echo '--------------------------------'
                echo 'Testing....'
                sh '''
                    .venv/bin/pip install -r app/requirements.txt
                    cd app && ../.venv/bin/python -m unittest discover
                '''
            }
        }
        stage('Security Scan') {
            steps {
                echo 'Security Scanning....'

        }
        stage('Building Docker Image') {
            steps {
                echo '--------------------------------'
                echo 'Building Docker Image....'
                sh '''
                    # Get git commit hash for versioning
                    GIT_COMMIT_SHORT=$(git rev-parse --short HEAD)
                    echo "Building with version: ${GIT_COMMIT_SHORT}"
                    
                    docker build -t rs-school-devops:${GIT_COMMIT_SHORT} ./app
                    docker tag rs-school-devops:${GIT_COMMIT_SHORT} rs-school-devops:latest
                '''
            }
        }
        stage('Push Docker Image') {
            steps {
                echo '--------------------------------'
                echo 'Pushing Docker Image to Docker Hub....'
                withCredentials([usernamePassword(credentialsId: 'dockerhub-credentials', 
                                                 passwordVariable: 'DOCKER_PASSWORD', 
                                                 usernameVariable: 'DOCKER_USERNAME')]) {
                    sh '''
                        # Get git commit hash for versioning
                        GIT_COMMIT_SHORT=$(git rev-parse --short HEAD)
                        
                        # Tag with Docker Hub repository name
                        docker tag rs-school-devops:${GIT_COMMIT_SHORT} ${DOCKER_USERNAME}/rs-school-devops:${GIT_COMMIT_SHORT}
                        docker tag rs-school-devops:${GIT_COMMIT_SHORT} ${DOCKER_USERNAME}/rs-school-devops:latest
                        
                        # Login and push to Docker Hub
                        echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin
                        docker push ${DOCKER_USERNAME}/rs-school-devops:${GIT_COMMIT_SHORT}
                        docker push ${DOCKER_USERNAME}/rs-school-devops:latest
                        docker logout
                    '''
                }
            }
        }
        stage('Deploy') {
            steps {
                echo '--------------------------------'
                echo 'Deploying with Helm....'
                sh '''
                    GIT_COMMIT_SHORT=$(git rev-parse --short HEAD)
                    DOCKER_IMAGE="${DOCKER_USERNAME}/rs-school-devops:${GIT_COMMIT_SHORT}"
                    
                    echo "Deploying ${DOCKER_IMAGE} to Kubernetes using Helm..."
                    
                    # Deploy using Helm
                    helm upgrade --install rs-school-devops ./k8s/helm/nginx/ \
                        --set image.repository="${DOCKER_USERNAME}/rs-school-devops" \
                        --set image.tag="${GIT_COMMIT_SHORT}" \
                        --wait \
                        --timeout=300s
                    
                    # Show deployment status
                    kubectl get deployments
                    kubectl get services
                    kubectl get pods
                '''
            }
        }
        stage('Verify Deployment') {
            steps {
                echo '--------------------------------'
                echo 'Verifying Kubernetes Deployment....'
                sh '''
                    # Wait for deployment to be ready
                    kubectl wait --for=condition=available --timeout=300s deployment/rs-school-devops
                    
                    # Get service information
                    kubectl get service rs-school-devops-service
                    
                    # Get pod status
                    kubectl get pods -l app=rs-school-devops
                    
                    # Test the service (assuming NodePort service)
                    NODE_PORT=$(kubectl get service rs-school-devops-service -o jsonpath='{.spec.ports[0].nodePort}')
                    echo "Service available on NodePort: ${NODE_PORT}"
                    
                    # Install curl and test the endpoint
                    .venv/bin/pip install requests
                    .venv/bin/python -c "
import requests
import time
import os

# For testing purposes, we'll just verify the deployment exists
# In a real environment, you'd test the actual service endpoint
print('Deployment verification complete!')
print('Service is running on NodePort: ${NODE_PORT}')

# If you have access to the cluster, you could test like this:
# response = requests.get(f'http://cluster-ip:{NODE_PORT}/')
# assert response.status_code == 200
# assert 'Hello, World!' in response.text
"
                '''
            }
        }
    }
  }
}